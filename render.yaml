# Render deployment configuration (FULL VERSION with Voice Features)
services:
  - type: web
    name: english-learning-app
    env: python
    plan: free
    buildCommand: |
      echo "üöÄ Starting build process..."
      echo "Current user: $(whoami)"
      echo "User ID: $(id)"
      echo "Current directory: $(pwd)"
      
      # Update package lists
      echo "üì¶ Updating package lists..."
      sudo apt-get update || echo "apt-get update failed"
      
      # Install system dependencies
      echo "üîß Installing basic system dependencies..."
      sudo apt-get install -y wget curl unzip xvfb software-properties-common || echo "basic deps install failed"
      
      # Simplified Chrome Installation - Focus on what works
      echo "üåê Installing Google Chrome (Simplified Approach)..."
      
      # Method 1: Direct download and install Google Chrome
      echo "üì• Method 1: Direct Google Chrome installation..."
      cd /tmp
      wget -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb || echo "Chrome download failed"
      
      if [ -f google-chrome.deb ]; then
        echo "Chrome package downloaded successfully"
        sudo dpkg -i google-chrome.deb || echo "Initial Chrome install failed (expected)"
        sudo apt-get install -f -y || echo "Chrome dependency install failed"
        echo "Chrome installation attempt completed"
      else
        echo "Chrome download failed, trying alternative..."
      fi
      
      # Method 2: Repository-based installation
      echo "üì• Method 2: Repository installation..."
      wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - || echo "Google key failed"
      echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list || echo "Chrome repo failed"
      sudo apt-get update || echo "Chrome repo update failed"
      sudo apt-get install -y google-chrome-stable || echo "Repository Chrome install failed"
      
      # Method 3: Chromium fallback
      echo "ÔøΩ Method 3: Chromium fallback..."
      sudo apt-get install -y chromium-browser || echo "Chromium install failed"
      
      # Comprehensive verification and symlinking
      echo "üîç Comprehensive Chrome verification..."
      
      # Check what actually got installed
      echo "--- Package verification ---"
      dpkg -l | grep -E "(google-chrome|chromium)" || echo "No Chrome packages found"
      
      # Check all possible binary locations
      echo "--- Binary location check ---"
      CHROME_LOCATIONS=(
        "/usr/bin/google-chrome-stable"
        "/usr/bin/google-chrome"
        "/usr/bin/chromium-browser"
        "/usr/bin/chromium"
        "/opt/google/chrome/chrome"
        "/opt/google/chrome/google-chrome"
      )
      
      FOUND_CHROME=""
      for location in "${CHROME_LOCATIONS[@]}"; do
        if [ -f "$location" ]; then
          echo "‚úÖ Found Chrome at: $location"
          if [ -z "$FOUND_CHROME" ]; then
            FOUND_CHROME="$location"
          fi
          # Test if it works
          $location --version && echo "  ‚úÖ Version check passed" || echo "  ‚ùå Version check failed"
        else
          echo "‚ùå Not found: $location"
        fi
      done
      
      # Create universal symlinks if we found Chrome
      if [ -n "$FOUND_CHROME" ]; then
        echo "üîó Creating universal symlinks using: $FOUND_CHROME"
        sudo mkdir -p /usr/local/bin
        
        # Create all common Chrome aliases
        sudo ln -sf "$FOUND_CHROME" /usr/local/bin/google-chrome-stable || echo "symlink 1 failed"
        sudo ln -sf "$FOUND_CHROME" /usr/local/bin/google-chrome || echo "symlink 2 failed"
        sudo ln -sf "$FOUND_CHROME" /usr/local/bin/chrome || echo "symlink 3 failed"
        sudo ln -sf "$FOUND_CHROME" /usr/local/bin/chromium || echo "symlink 4 failed"
        sudo ln -sf "$FOUND_CHROME" /usr/local/bin/chromium-browser || echo "symlink 5 failed"
        
        echo "‚úÖ Chrome symlinks created successfully"
        echo "‚úÖ Chrome binary available at: $FOUND_CHROME"
        
        # Test the symlinks
        echo "--- Testing symlinks ---"
        /usr/local/bin/google-chrome --version && echo "‚úÖ google-chrome symlink works" || echo "‚ùå google-chrome symlink failed"
        /usr/local/bin/chromium --version && echo "‚úÖ chromium symlink works" || echo "‚ùå chromium symlink failed"
      else
        echo "‚ùå NO CHROME BINARY FOUND - All installation methods failed"
        echo "‚ùå Selenium chatbot will not work without Chrome"
      fi
      
      # Final PATH and environment setup
      echo "--- Environment setup ---"
      echo "PATH: $PATH"
      echo "Available Chrome commands:"
      which google-chrome-stable && echo "‚úÖ google-chrome-stable available" || echo "‚ùå google-chrome-stable not available"
      which google-chrome && echo "‚úÖ google-chrome available" || echo "‚ùå google-chrome not available"
      which chromium && echo "‚úÖ chromium available" || echo "‚ùå chromium not available"
      which chromium-browser && echo "‚úÖ chromium-browser available" || echo "‚ùå chromium-browser not available"
      
      # Install Python dependencies
      echo "üì¶ Installing Python dependencies..."
      pip install -r requirements.txt
      
      echo "üéØ Build process completed!"
      if [ -n "$FOUND_CHROME" ]; then
        echo "‚úÖ Chrome installation: SUCCESS"
      else
        echo "‚ùå Chrome installation: FAILED"
      fi
    startCommand: python backend/app.py
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: TURSO_DATABASE_URL
        sync: false
      - key: TURSO_AUTH_TOKEN
        sync: false
      - key: FLASK_ENV
        value: production
      - key: RENDER
        value: true
      - key: SELENIUM_HEADLESS
        value: true
      - key: GOOGLE_CHROME_BIN
        value: /usr/local/bin/google-chrome
      - key: CHROMEDRIVER_PATH
        value: /usr/local/bin/chromedriver
      - key: PATH
        value: /usr/local/bin:/snap/bin:/usr/bin:/bin
      - key: GOOGLE_TRANSLATE_API_KEY
        sync: false
